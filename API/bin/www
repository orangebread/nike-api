#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var express = require('express');
var secureApp = require('../app');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');

var certsPath = path.join(__dirname, 'certs', 'server');
var caCertsPath = path.join(__dirname, 'certs', 'ca');

//
// SSL Certificates
//
var https_options = {
  key: fs.readFileSync(path.join(certsPath, 'my-server.key.pem'))
  // This certificate should be a bundle containing your server certificate and any intermediates
  // cat certs/cert.pem certs/chain.pem > certs/server-bundle.pem
  , cert: fs.readFileSync(path.join(certsPath, 'my-server.crt.pem'))
  // ca only needs to be specified for peer-certificates
//, ca: [ fs.readFileSync(path.join(caCertsPath, 'my-root-ca.crt.pem')) ]
  , requestCert: false
  , rejectUnauthorized: true
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var securePort = normalizePort(process.env.SECURE_PORT || '4433');

// app.set('port', port);
// app.get("*", function (req, res, next) {
//   res.redirect("https://" + req.headers.host + "/" + req.path);
// });
secureApp.set('port', securePort);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var https_server = https.createServer(https_options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

// http server
server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

// https server
https_server.listen(securePort);
https_server.on('error', onError);
https_server.on('listening', onListeningHttps);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr =  server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}

function onListeningHttps() {
  var addr =  https_server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}